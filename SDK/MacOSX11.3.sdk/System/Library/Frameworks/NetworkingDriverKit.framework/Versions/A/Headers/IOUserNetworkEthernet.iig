/*
 * Copyright (c) 2019-2020 Apple, Inc. All rights reserved.
 *
 * @APPLE_OSREFERENCE_LICENSE_HEADER_START@
 *
 * This file contains Original Code and/or Modifications of Original Code
 * as defined in and that are subject to the Apple Public Source License
 * Version 2.0 (the 'License'). You may not use this file except in
 * compliance with the License. The rights granted to you under the License
 * may not be used to create, or enable the creation or redistribution of,
 * unlawful or unlicensed copies of an Apple operating system, or to
 * circumvent, violate, or enable the circumvention or violation of, any
 * terms of an Apple operating system software license agreement.
 *
 * Please obtain a copy of the License at
 * http://www.opensource.apple.com/apsl/ and read it before using this file.
 *
 * The Original Code and all software distributed under the License are
 * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
 * Please see the License for the specific language governing rights and
 * limitations under the License.
 *
 * @APPLE_OSREFERENCE_LICENSE_HEADER_END@
 */

#ifndef _IOUSERNETWORKETHERNET_IIG
#define _IOUSERNETWORKETHERNET_IIG

#include <net/ethernet.h>

#include <DriverKit/IOService.iig>
#include <DriverKit/OSAction.iig>
#include <DriverKit/IODispatchQueue.iig>
#include <DriverKit/IODataQueueDispatchSource.iig>

#include <NetworkingDriverKit/IOUserNetworkTypes.h>
#include <NetworkingDriverKit/IOUserNetworkPacketQueue.iig>
#include <NetworkingDriverKit/IOUserNetworkPacketBufferPool.iig>

struct _IOUserNetworkEthernetInterfaceDescriptor;
struct nicproxy_limits_info_s;
struct offload_info_s;

/*!
@iig implementation
#if KERNEL
#include <NetworkingDriverKit/IOUserNetworkPacketBufferPool_kext.h>
#include <NetworkingDriverKit/IOUserNetworkPacketQueue_kext.h>
#include <NetworkingDriverKit/IOUserNetworkEthernet_kext.h>
#endif
@iig end
*/

class KERNEL IOUserNetworkEthernet : public IOService
{
public:
    virtual bool
    init() override;

    virtual void
    free() override;

    kern_return_t
    SetTxPacketHeadroom(uint16_t numBytes) LOCALONLY;

    kern_return_t
    SetTxPacketTailroom(uint16_t numBytes) LOCALONLY;

    kern_return_t
    SetWakeOnMagicPacketSupport(bool isSupported) LOCALONLY;

    kern_return_t
    SetSoftwareVlanSupport(bool isSupported) LOCALONLY;

    virtual kern_return_t
    RegisterEthernetInterface(
        IOUserNetworkMACAddress macAddress,
        IOUserNetworkPacketBufferPool * pool,
        IOUserNetworkPacketQueue ** queues,
        uint32_t queueCount) LOCALONLY;

    virtual kern_return_t
    ReportLinkStatus(
        IOUserNetworkLinkStatus linkStatus,
        IOUserNetworkMediaType  activeMediaType);

    virtual kern_return_t
    ReportLinkQuality(IOUserNetworkLinkQuality linkQuality);

    virtual kern_return_t
    ReportDataBandwidths(
        uint64_t    maxInputBandwidth,
        uint64_t    maxOutputBandwidth,
        uint64_t    effectiveInputBandwidth,
        uint64_t    effectiveOutputBandwidth);

    virtual kern_return_t
    SetInterfaceEnable(bool isEnable) = 0;

    virtual kern_return_t
    SetPromiscuousModeEnable(bool enable) = 0;

    /** @deprecated, use  setMulticastAddresses instead */
    virtual kern_return_t
    SetMulticastAddresses(
        const IOUserNetworkMACAddress * addresses,
        uint32_t count);

    virtual kern_return_t
    setMulticastAddresses(
        const ether_addr_t * addresses,
        uint32_t count) LOCALONLY;

    virtual kern_return_t
    SetAllMulticastModeEnable(bool enable) = 0;

    virtual kern_return_t
    ReportAvailableMediaTypes(
        const IOUserNetworkMediaType * mediaTypes,
        uint32_t count) LOCALONLY;

    virtual kern_return_t
    SelectMediaType(IOUserNetworkMediaType mediaType) = 0;

    virtual kern_return_t
    SetWakeOnMagicPacketEnable(bool enable) = 0;

    virtual kern_return_t
    SetMTU( uint32_t mtu ) LOCAL = 0;

    virtual kern_return_t
    GetMaxTransferUnit( uint32_t *mtu ) LOCAL = 0;
    
    virtual kern_return_t
    SetHardwareAssists( uint32_t hardwareAssists ) LOCAL = 0;

    virtual kern_return_t
    GetHardwareAssists( uint32_t *hardwareAssists ) LOCAL = 0;

    virtual kern_return_t
    ReportNicProxyLimits(nicproxy_limits_info_s nicproxy_limits_info);
    
    virtual kern_return_t SetPowerState(uint32_t powerstate) override;

    virtual void hwConfigNicProxyData(offload_info_s *handoff) LOCALONLY;
};

class EXTENDS (IOUserNetworkEthernet) IOUserNetworkEthernetPrivate
{
    virtual kern_return_t
    _RegisterEthernetInterface(
        _IOUserNetworkEthernetInterfaceDescriptor descriptor,
        IOUserNetworkPacketBufferPool * pool,
        IOUserNetworkPacketQueue * queue1,
        IOUserNetworkPacketQueue * queue2,
        IOUserNetworkPacketQueue * queue3,
        IOUserNetworkPacketQueue * queue4);

    virtual kern_return_t
    _SetMulticastAddresses(IOMemoryDescriptor * md) LOCAL;

    virtual kern_return_t
    _ReportAvailableMediaTypes(
        const uint32_t mediaTypes[256], uint32_t mediaTypesCount);

    virtual void
    _DataAvailable(
        OSAction * action) TYPE(IODataQueueDispatchSource::DataAvailable);
    
    virtual kern_return_t
    RetainNicProxyData(uint64_t *handoff);

    virtual kern_return_t
    ReleaseNicProxyData();
};

struct _IOUserNetworkEthernetInterfaceDescriptor {
    ether_addr_t macAddress;
    uint32_t                featureFlags;
    uint32_t                 _reserved;
    uint16_t                txPacketHeadroomBytes;
    uint16_t                txPacketTailroomBytes;
} __attribute__((packed));

typedef struct nicproxy_limits_info_s {
    uint8_t ipv4_cnt;
    uint8_t ipv6_cnt;
    uint16_t kaIPv4Count;
    uint16_t kaIPv6Count;
    uint16_t wakeUDPCount;
    uint16_t wakeTCPCount;
    uint16_t rr_cnt;
    uint8_t mDnsMaxDomainLen;
    uint8_t ethCount;
    uint16_t rr_buf_size;
} __attribute__((packed)) nicproxy_limits_info_t;

#endif /* ! _IOUSERNETWORKETHERNET_H */
