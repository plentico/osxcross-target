/*
 * Copyright (c) 2019-2020 Apple, Inc. All rights reserved.
 *
 * @APPLE_OSREFERENCE_LICENSE_HEADER_START@
 *
 * This file contains Original Code and/or Modifications of Original Code
 * as defined in and that are subject to the Apple Public Source License
 * Version 2.0 (the 'License'). You may not use this file except in
 * compliance with the License. The rights granted to you under the License
 * may not be used to create, or enable the creation or redistribution of,
 * unlawful or unlicensed copies of an Apple operating system, or to
 * circumvent, violate, or enable the circumvention or violation of, any
 * terms of an Apple operating system software license agreement.
 *
 * Please obtain a copy of the License at
 * http://www.opensource.apple.com/apsl/ and read it before using this file.
 *
 * The Original Code and all software distributed under the License are
 * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
 * Please see the License for the specific language governing rights and
 * limitations under the License.
 *
 * @APPLE_OSREFERENCE_LICENSE_HEADER_END@
 */

#ifndef _IOUSERNETWORKPACKETQUEUE_IIG
#define _IOUSERNETWORKPACKETQUEUE_IIG

#include <DriverKit/OSObject.iig>
#include <NetworkingDriverKit/IOUserNetworkPacket.iig>
#include <DriverKit/IODataQueueDispatchSource.iig>

/*!
@iig implementation
#if KERNEL
#include <IOSkywalkFamily/IOSkywalkPacketQueue.h>
#include <NetworkingDriverKit/IOUserNetworkPacketQueue_kext.h>
#endif
@iig end
*/

class KERNEL IOUserNetworkPacketQueue : public OSObject
{
public:
    virtual bool
    init() override;

    virtual void
    free() override;

    virtual kern_return_t
    SetEnable(bool isEnable) = 0;

    virtual kern_return_t
    SetPacketBufferPool(
        IOUserNetworkPacketBufferPool * pool) LOCALONLY;

    virtual kern_return_t
    SetPacketDirection(
        IOUserNetworkPacketDirection    direction) LOCALONLY;

    virtual kern_return_t
    CopyDataQueue(
        IODataQueueDispatchSource ** dataQueue) LOCALONLY;

    virtual kern_return_t
    SetDataQueue(
        IODataQueueDispatchSource * dataQueue) LOCAL;

    virtual kern_return_t
    EnqueuePacket(
        IOUserNetworkPacket *    packet) LOCALONLY;

    virtual uint32_t
    EnqueuePackets(
        IOUserNetworkPacket **   packets,
        uint32_t                    packetCount) LOCALONLY;

    virtual kern_return_t
    DequeuePacket(
        IOUserNetworkPacket **   packet) LOCALONLY;

    virtual uint32_t
    DequeuePackets(
        IOUserNetworkPacket **   packets,
        uint32_t                    maxDequeueCount) LOCALONLY;
};

#endif /* ! _IOUSERNETWORKPACKETQUEUE_IIG */
