/*
 * Copyright (c) 2019-2020 Apple, Inc. All rights reserved.
 *
 * @APPLE_OSREFERENCE_LICENSE_HEADER_START@
 *
 * This file contains Original Code and/or Modifications of Original Code
 * as defined in and that are subject to the Apple Public Source License
 * Version 2.0 (the 'License'). You may not use this file except in
 * compliance with the License. The rights granted to you under the License
 * may not be used to create, or enable the creation or redistribution of,
 * unlawful or unlicensed copies of an Apple operating system, or to
 * circumvent, violate, or enable the circumvention or violation of, any
 * terms of an Apple operating system software license agreement.
 *
 * Please obtain a copy of the License at
 * http://www.opensource.apple.com/apsl/ and read it before using this file.
 *
 * The Original Code and all software distributed under the License are
 * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
 * Please see the License for the specific language governing rights and
 * limitations under the License.
 *
 * @APPLE_OSREFERENCE_LICENSE_HEADER_END@
 */

#ifndef _IOUSERNETWORKPACKETBUFFERPOOL_IIG
#define _IOUSERNETWORKPACKETBUFFERPOOL_IIG

#include <DriverKit/IOMemoryDescriptor.iig>
#include <DriverKit/IODMACommand.iig>
#include <NetworkingDriverKit/IOUserNetworkPacket.iig>

/*! @enum PoolFlags
    @abstract Flags for PoolOptions::poolFlags.
    @constant PoolFlagSingleMemorySegment The pool will be constucted with single memory segment of buffers.
    @constant PoolFlagPersistentMemory The pool memory will be persistently wired.
*/
enum IOUserNetworkPacketBufferPoolFlags {
    PoolFlagSingleMemorySegment = 0x00000002,
    PoolFlagPersistentMemory    = 0x00000004,
    PoolFlagMapToDext           = 0x10000000,
    PoolFlagMapToDevice         = 0x20000000,
    PoolFlagMask = PoolFlagSingleMemorySegment | PoolFlagPersistentMemory | PoolFlagMapToDext | PoolFlagMapToDevice,
};

struct IOUserNetworkPacketBufferPoolOptions {
    uint32_t packetCount;
    uint32_t bufferCount;
    uint32_t bufferSize;
    uint32_t maxBuffersPerPacket;
    uint32_t memorySegmentSize;
    uint32_t poolFlags;
    IODMACommandSpecification dmaSpecification;
    uint32_t _resv[16];
};

/*!
@iig implementation
#if KERNEL
#include <IOSkywalkFamily/IOSkywalkPacketBufferPool.h>
#include <NetworkingDriverKit/IOUserNetworkPacket_kext.h>
#include <NetworkingDriverKit/IOUserNetworkPacketBufferPool_kext.h>
#include <NetworkingDriverKit/IOUserNetworkMemorySegment_kext.h>
#endif
@iig end
*/

class KERNEL IOUserNetworkPacketBufferPool : public OSObject
{
public:
    virtual bool
    init() override;

    virtual void
    free() override;

    /** @deprecated, use CreateWithOptions instead */
    static kern_return_t
    Create(
        OSObject * poolOwner,
        const char name[1024],
        uint32_t packetCount,
        uint32_t bufferCount,
        uint32_t bufferSize,
        IOUserNetworkPacketBufferPool ** pool) LOCALONLY;

    static kern_return_t
    CreateWithOptions(
        IOService * device,
        const char name[1024],
        const IOUserNetworkPacketBufferPoolOptions * options,
        IOUserNetworkPacketBufferPool ** pool) LOCALONLY;

    virtual kern_return_t
    DeallocatePacket(
        IOUserNetworkPacket * packet) LOCALONLY;

    virtual kern_return_t
    DeallocatePackets(
        IOUserNetworkPacket ** packets,
        uint32_t packetsCount) LOCALONLY;

    virtual kern_return_t
    CopyMemoryDescriptor(
        IOMemoryDescriptor ** memory);

    virtual kern_return_t
    GetPacketCount(uint32_t * count) LOCAL;

    virtual kern_return_t
    GetBufferCount(uint32_t * count) LOCAL;
};

class EXTENDS (IOUserNetworkPacketBufferPool) IOUserNetworkPacketBufferPoolPrivate
{
    static kern_return_t
    _Create(
        IOService * device,
        const char name[1024],
        const IOUserNetworkPacketBufferPoolOptions * options,
        IOUserNetworkPacketBufferPool ** pool) LOCAL;

    virtual kern_return_t
    GetPacketWithState(
        const IOUserNetworkPacketState * state,
        IOUserNetworkPacket ** packet) LOCALONLY;

    virtual kern_return_t
    _CopyPacketWithIndex(
        uint32_t index,
        IOUserNetworkPacket ** packet);

    virtual kern_return_t
    _DeallocatePacket(
        uint32_t packetIndex);
};

#endif /* ! _IOUSERNETWORKPACKETBUFFERPOOL_IIG */
