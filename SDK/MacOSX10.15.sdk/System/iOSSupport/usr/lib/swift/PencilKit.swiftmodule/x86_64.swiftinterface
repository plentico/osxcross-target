// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2 (swiftlang-1103.8.25.8 clang-1103.0.30.20)
// swift-module-flags: -target x86_64-apple-ios13.0-macabi -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftPencilKit -swift-version 5 -O -enforce-exclusivity=unchecked -module-name PencilKit
@_exported import PencilKit
import Swift
@available(iOS 13.0, OSX 10.15, *)
public struct PKDrawing {
  public init()
  public init(data: Foundation.Data) throws
  public func dataRepresentation() -> Foundation.Data
  public var bounds: CoreGraphics.CGRect {
    get
  }
  public func image(from rect: CoreGraphics.CGRect, scale: CoreGraphics.CGFloat) -> UIKit.UIImage
  public mutating func transform(using transform: CoreGraphics.CGAffineTransform)
  public func transformed(using transform: CoreGraphics.CGAffineTransform) -> PencilKit.PKDrawing
  public mutating func append(_ toAppend: PencilKit.PKDrawing)
  public func appending(_ toAppend: PencilKit.PKDrawing) -> PencilKit.PKDrawing
}
@available(iOS 13.0, OSX 10.15, *)
extension PKDrawing : Swift.Equatable {
  public static func == (a: PencilKit.PKDrawing, b: PencilKit.PKDrawing) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, *)
extension PKDrawing : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@available(iOS 13.0, OSX 10.15, *)
extension PKDrawing : Swift._ObjectiveCBridgeable {
  public typealias _ObjectiveCType = PencilKit.PKDrawingReference
  public func _bridgeToObjectiveC() -> PencilKit.PKDrawing._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: PencilKit.PKDrawing._ObjectiveCType, result: inout PencilKit.PKDrawing?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PencilKit.PKDrawing._ObjectiveCType, result: inout PencilKit.PKDrawing?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PencilKit.PKDrawing._ObjectiveCType?) -> PencilKit.PKDrawing
}
@available(iOS 13.0, *)
public struct PKEraserTool : PencilKit.PKTool, Swift.Equatable {
  public init(_ eraserType: PencilKit.PKEraserTool.EraserType)
  public enum EraserType {
    case vector
    case bitmap
    public static func == (a: PencilKit.PKEraserTool.EraserType, b: PencilKit.PKEraserTool.EraserType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var eraserType: PencilKit.PKEraserTool.EraserType {
    get
    set
  }
  public static func == (a: PencilKit.PKEraserTool, b: PencilKit.PKEraserTool) -> Swift.Bool
}
@available(iOS 13.0, *)
extension PKEraserTool : Swift._ObjectiveCBridgeable {
  public typealias _ObjectiveCType = PencilKit.PKEraserToolReference
  public func _bridgeToObjectiveC() -> PencilKit.PKEraserTool._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: PencilKit.PKEraserTool._ObjectiveCType, result: inout PencilKit.PKEraserTool?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PencilKit.PKEraserTool._ObjectiveCType, result: inout PencilKit.PKEraserTool?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PencilKit.PKEraserTool._ObjectiveCType?) -> PencilKit.PKEraserTool
}
@available(iOS 13.0, *)
public struct PKInkingTool : PencilKit.PKTool, Swift.Equatable {
  public init(_ inkType: PencilKit.PKInkingTool.InkType, color: UIKit.UIColor = UIColor.black, width: CoreGraphics.CGFloat? = nil)
  public enum InkType : Swift.String {
    case pen
    case pencil
    case marker
    public var defaultWidth: CoreGraphics.CGFloat {
      get
    }
    public var validWidthRange: Swift.ClosedRange<CoreGraphics.CGFloat> {
      get
    }
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public var color: UIKit.UIColor {
    get
    set
  }
  public static func convertColor(_ color: UIKit.UIColor, from: UIKit.UIUserInterfaceStyle, to: UIKit.UIUserInterfaceStyle) -> UIKit.UIColor
  public var width: CoreGraphics.CGFloat {
    get
    set
  }
  public var inkType: PencilKit.PKInkingTool.InkType {
    get
    set
  }
  public static func == (a: PencilKit.PKInkingTool, b: PencilKit.PKInkingTool) -> Swift.Bool
}
@available(iOS 13.0, *)
extension PKInkingTool : Swift._ObjectiveCBridgeable {
  public typealias _ObjectiveCType = PencilKit.PKInkingToolReference
  public func _bridgeToObjectiveC() -> PencilKit.PKInkingTool._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: PencilKit.PKInkingTool._ObjectiveCType, result: inout PencilKit.PKInkingTool?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PencilKit.PKInkingTool._ObjectiveCType, result: inout PencilKit.PKInkingTool?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PencilKit.PKInkingTool._ObjectiveCType?) -> PencilKit.PKInkingTool
}
@available(iOS 13.0, *)
public struct PKLassoTool : PencilKit.PKTool, Swift.Equatable {
  public init()
  public static func == (a: PencilKit.PKLassoTool, b: PencilKit.PKLassoTool) -> Swift.Bool
}
@available(iOS 13.0, *)
extension PKLassoTool : Swift._ObjectiveCBridgeable {
  public typealias _ObjectiveCType = PencilKit.PKLassoToolReference
  public func _bridgeToObjectiveC() -> PencilKit.PKLassoTool._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: PencilKit.PKLassoTool._ObjectiveCType, result: inout PencilKit.PKLassoTool?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PencilKit.PKLassoTool._ObjectiveCType, result: inout PencilKit.PKLassoTool?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PencilKit.PKLassoTool._ObjectiveCType?) -> PencilKit.PKLassoTool
}
@available(iOS 13.0, *)
public protocol PKTool {
}
@available(iOS 13.0, *)
extension PencilKit.PKEraserTool.EraserType : Swift.Equatable {}
@available(iOS 13.0, *)
extension PencilKit.PKEraserTool.EraserType : Swift.Hashable {}
@available(iOS 13.0, *)
extension PencilKit.PKInkingTool.InkType : Swift.Equatable {}
@available(iOS 13.0, *)
extension PencilKit.PKInkingTool.InkType : Swift.Hashable {}
@available(iOS 13.0, *)
extension PencilKit.PKInkingTool.InkType : Swift.RawRepresentable {}
