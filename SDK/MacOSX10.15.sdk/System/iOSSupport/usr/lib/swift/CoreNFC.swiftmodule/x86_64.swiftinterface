// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2 (swiftlang-1103.8.25.8 clang-1103.0.30.20)
// swift-module-flags: -target x86_64-apple-ios13.0-macabi -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftCoreNFC -swift-version 5 -O -enforce-exclusivity=unchecked -module-name CoreNFC
@_exported import CoreNFC
import Swift
import _SwiftCoreNFCOverlayShims
@available(iOS 11.0, *)
extension NFCNDEFPayload {
  @available(iOS 13.0, *)
  open func wellKnownTypeTextPayload() -> (Swift.String?, Foundation.Locale?)
}
@available(iOS 13.0, *)
public enum NFCTag {
  case feliCa(CoreNFC.NFCFeliCaTag)
  case iso7816(CoreNFC.NFCISO7816Tag)
  case iso15693(CoreNFC.NFCISO15693Tag)
  case miFare(CoreNFC.NFCMiFareTag)
  public var isAvailable: Swift.Bool {
    get
  }
}
@available(iOS 13.0, *)
extension NFCTagReaderSession {
  @available(iOS 13.0, *)
  open var connectedTag: CoreNFC.NFCTag? {
    get
  }
  @available(iOS 13.0, *)
  convenience public init?(pollingOption: CoreNFC.NFCTagReaderSession.PollingOption, delegate: CoreNFC.NFCTagReaderSessionDelegate, queue: Dispatch.DispatchQueue? = nil)
  @available(iOS 13.0, *)
  open func connect(to tag: CoreNFC.NFCTag, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
}
@available(iOS 13.0, *)
public protocol NFCTagReaderSessionDelegate : ObjectiveC.NSObjectProtocol {
  @available(iOS 13.0, *)
  func tagReaderSessionDidBecomeActive(_ session: CoreNFC.NFCTagReaderSession)
  @available(iOS 13.0, *)
  func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didInvalidateWithError error: Swift.Error)
  @available(iOS 13.0, *)
  func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didDetect tags: [CoreNFC.NFCTag])
}
