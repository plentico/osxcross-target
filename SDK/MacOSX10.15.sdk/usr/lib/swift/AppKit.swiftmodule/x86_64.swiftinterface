// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2 (swiftlang-1103.8.25.8 clang-1103.0.30.20)
// swift-module-flags: -target x86_64-apple-macosx10.15 -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftAppKit -swift-version 5 -O -enforce-exclusivity=unchecked -module-name AppKit
@_exported import AppKit
import Foundation
import Swift
import _SwiftAppKitOverlayShims
extension NSCursor : Swift.__DefaultCustomPlaygroundQuickLookable {
  @available(*, deprecated, message: "NSCursor._defaultCustomPlaygroundQuickLook will be removed in a future Swift version")
  public var _defaultCustomPlaygroundQuickLook: Swift.PlaygroundQuickLook {
    get
  }
}
extension NSView : Swift.__DefaultCustomPlaygroundQuickLookable {
  @available(*, deprecated, message: "NSView._defaultCustomPlaygroundQuickLook will be removed in a future Swift version")
  public var _defaultCustomPlaygroundQuickLook: Swift.PlaygroundQuickLook {
    get
  }
}
@available(OSX 10.12.2, *)
extension NSTouchBar : Swift.__DefaultCustomPlaygroundQuickLookable {
  public var _defaultCustomPlaygroundQuickLook: Swift.PlaygroundQuickLook {
    get
  }
}
@available(OSX 10.12.2, *)
extension NSTouchBarItem : Swift.__DefaultCustomPlaygroundQuickLookable {
  public var _defaultCustomPlaygroundQuickLook: Swift.PlaygroundQuickLook {
    get
  }
}
extension NSGradient {
  convenience public init?(colorsAndLocations objects: (AppKit.NSColor, CoreGraphics.CGFloat)...)
}
public func NSApplicationMain(_ argc: Swift.Int32, _ argv: Swift.UnsafeMutablePointer<Swift.UnsafeMutablePointer<Swift.CChar>?>) -> Swift.Int32
extension NSApplication {
  @available(swift 4)
  public static func loadApplication()
}
extension NSColor : Swift._ExpressibleByColorLiteral {
  @nonobjc required convenience public init(_colorLiteralRed red: Swift.Float, green: Swift.Float, blue: Swift.Float, alpha: Swift.Float)
}
public typealias _ColorLiteralType = AppKit.NSColor
extension NSImage : Swift._ExpressibleByImageLiteral {
  @nonobjc required convenience public init(imageLiteralResourceName name: Swift.String)
}
public typealias _ImageLiteralType = AppKit.NSImage
@available(swift 4)
public protocol _AppKitKitNumericRawRepresentable : Swift.Comparable, Swift.RawRepresentable where Self.RawValue : Swift.Comparable, Self.RawValue : Swift.Numeric {
}
extension _AppKitKitNumericRawRepresentable {
  public static func < (lhs: Self, rhs: Self) -> Swift.Bool
  public static func + (lhs: Self, rhs: Self.RawValue) -> Self
  public static func + (lhs: Self.RawValue, rhs: Self) -> Self
  public static func - (lhs: Self, rhs: Self.RawValue) -> Self
  public static func - (lhs: Self, rhs: Self) -> Self.RawValue
  public static func += (lhs: inout Self, rhs: Self.RawValue)
  public static func -= (lhs: inout Self, rhs: Self.RawValue)
}
@available(swift 4)
extension NSAppKitVersion : AppKit._AppKitKitNumericRawRepresentable {
}
@available(swift 4)
extension NSLayoutConstraint.Priority : AppKit._AppKitKitNumericRawRepresentable {
}
@available(swift 4)
extension NSStackView.VisibilityPriority : AppKit._AppKitKitNumericRawRepresentable {
}
@available(swift 4)
extension NSToolbarItem.VisibilityPriority : AppKit._AppKitKitNumericRawRepresentable {
}
@available(swift 4)
@available(OSX 10.12.2, *)
extension NSTouchBarItem.Priority : AppKit._AppKitKitNumericRawRepresentable {
}
@available(swift 4)
extension NSWindow.Level : AppKit._AppKitKitNumericRawRepresentable {
}
@available(swift 4)
extension NSFont.Weight : AppKit._AppKitKitNumericRawRepresentable {
}
@available(OSX 10.15.1, *)
public struct NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType> where SectionIdentifierType : Swift.Hashable, ItemIdentifierType : Swift.Hashable {
  public init()
  public var numberOfItems: Swift.Int {
    get
  }
  public var numberOfSections: Swift.Int {
    get
  }
  public var sectionIdentifiers: [SectionIdentifierType] {
    get
  }
  public var itemIdentifiers: [ItemIdentifierType] {
    get
  }
  public func numberOfItems(inSection identifier: SectionIdentifierType) -> Swift.Int
  public func itemIdentifiers(inSection identifier: SectionIdentifierType) -> [ItemIdentifierType]
  public func sectionIdentifier(containingItem identifier: ItemIdentifierType) -> SectionIdentifierType?
  public func indexOfItem(_ identifier: ItemIdentifierType) -> Swift.Int?
  public func indexOfSection(_ identifier: SectionIdentifierType) -> Swift.Int?
  public mutating func appendItems(_ identifiers: [ItemIdentifierType], toSection sectionIdentifier: SectionIdentifierType? = nil)
  public mutating func insertItems(_ identifiers: [ItemIdentifierType], beforeItem beforeIdentifier: ItemIdentifierType)
  public mutating func insertItems(_ identifiers: [ItemIdentifierType], afterItem afterIdentifier: ItemIdentifierType)
  public mutating func deleteItems(_ identifiers: [ItemIdentifierType])
  public mutating func deleteAllItems()
  public mutating func moveItem(_ identifier: ItemIdentifierType, beforeItem toIdentifier: ItemIdentifierType)
  public mutating func moveItem(_ identifier: ItemIdentifierType, afterItem toIdentifier: ItemIdentifierType)
  public mutating func reloadItems(_ identifiers: [ItemIdentifierType])
  public mutating func appendSections(_ identifiers: [SectionIdentifierType])
  public mutating func insertSections(_ identifiers: [SectionIdentifierType], beforeSection toIdentifier: SectionIdentifierType)
  public mutating func insertSections(_ identifiers: [SectionIdentifierType], afterSection toIdentifier: SectionIdentifierType)
  public mutating func deleteSections(_ identifiers: [SectionIdentifierType])
  public mutating func moveSection(_ identifier: SectionIdentifierType, beforeSection toIdentifier: SectionIdentifierType)
  public mutating func moveSection(_ identifier: SectionIdentifierType, afterSection toIdentifier: SectionIdentifierType)
  public mutating func reloadSections(_ identifiers: [SectionIdentifierType])
}
@available(OSX 10.15.1, *)
extension NSDiffableDataSourceSnapshot : Swift._ObjectiveCBridgeable {
  @_semantics("convertToObjectiveC") public func _bridgeToObjectiveC() -> AppKit.NSDiffableDataSourceSnapshotReference
  public static func _forceBridgeFromObjectiveC(_ input: AppKit.NSDiffableDataSourceSnapshotReference, result: inout AppKit.NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType>?)
  public static func _conditionallyBridgeFromObjectiveC(_ input: AppKit.NSDiffableDataSourceSnapshotReference, result: inout AppKit.NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType>?) -> Swift.Bool
  @_effects(readonly) public static func _unconditionallyBridgeFromObjectiveC(_ snapshot: AppKit.NSDiffableDataSourceSnapshotReference?) -> AppKit.NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType>
  public typealias _ObjectiveCType = AppKit.NSDiffableDataSourceSnapshotReference
}
@available(OSX 10.15.1, *)
open class NSCollectionViewDiffableDataSource<SectionIdentifierType, ItemIdentifierType> : ObjectiveC.NSObject, AppKit.NSCollectionViewDataSource where SectionIdentifierType : Swift.Hashable, ItemIdentifierType : Swift.Hashable {
  public typealias ItemProvider = (AppKit.NSCollectionView, Foundation.IndexPath, ItemIdentifierType) -> AppKit.NSCollectionViewItem?
  public typealias SupplementaryViewProvider = (AppKit.NSCollectionView, Swift.String, Foundation.IndexPath) -> (AppKit.NSView & AppKit.NSCollectionViewElement)?
  public var supplementaryViewProvider: AppKit.NSCollectionViewDiffableDataSource<SectionIdentifierType, ItemIdentifierType>.SupplementaryViewProvider? {
    get
    set
  }
  public init(collectionView: AppKit.NSCollectionView, itemProvider: @escaping AppKit.NSCollectionViewDiffableDataSource<SectionIdentifierType, ItemIdentifierType>.ItemProvider)
  open func apply(_ snapshot: AppKit.NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType>, animatingDifferences: Swift.Bool = true, completion: (() -> Swift.Void)? = nil)
  open func snapshot() -> AppKit.NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType>
  open func itemIdentifier(for indexPath: Foundation.IndexPath) -> ItemIdentifierType?
  open func indexPath(for itemIdentifier: ItemIdentifierType) -> Foundation.IndexPath?
  @objc open func numberOfSections(in collectionView: AppKit.NSCollectionView) -> Swift.Int
  @objc open func collectionView(_ collectionView: AppKit.NSCollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc open func collectionView(_ collectionView: AppKit.NSCollectionView, itemForRepresentedObjectAt indexPath: Foundation.IndexPath) -> AppKit.NSCollectionViewItem
  @objc open func collectionView(_ collectionView: AppKit.NSCollectionView, viewForSupplementaryElementOfKind kind: AppKit.NSCollectionView.SupplementaryElementKind, at indexPath: Foundation.IndexPath) -> AppKit.NSView
  public func description() -> Swift.String
  @objc deinit
  @objc override dynamic public init()
}
extension IndexPath {
  public init(item: Swift.Int, section: Swift.Int)
  public var item: Swift.Int {
    get
    set
  }
  public var section: Swift.Int {
    get
    set
  }
}
extension URLResourceValues {
  @available(OSX 10.10, *)
  public var thumbnail: AppKit.NSImage? {
    get
  }
  public var labelColor: AppKit.NSColor? {
    get
  }
  public var effectiveIcon: Swift.AnyObject? {
    get
  }
  public var customIcon: AppKit.NSImage? {
    get
  }
  @available(OSX 10.10, *)
  public var thumbnailDictionary: [Foundation.URLThumbnailDictionaryItem : AppKit.NSImage]? {
    get
  }
}
extension CocoaError.Code {
  public static var textReadInapplicableDocumentType: Foundation.CocoaError.Code {
    get
  }
  public static var textWriteInapplicableDocumentType: Foundation.CocoaError.Code {
    get
  }
  public static var serviceApplicationNotFound: Foundation.CocoaError.Code {
    get
  }
  public static var serviceApplicationLaunchFailed: Foundation.CocoaError.Code {
    get
  }
  public static var serviceRequestTimedOut: Foundation.CocoaError.Code {
    get
  }
  public static var serviceInvalidPasteboardData: Foundation.CocoaError.Code {
    get
  }
  public static var serviceMalformedServiceDictionary: Foundation.CocoaError.Code {
    get
  }
  public static var serviceMiscellaneousError: Foundation.CocoaError.Code {
    get
  }
  public static var sharingServiceNotConfigured: Foundation.CocoaError.Code {
    get
  }
  @available(OSX 10.13, *)
  public static var fontAssetDownloadError: Foundation.CocoaError.Code {
    get
  }
}
extension CocoaError.Code {
  @available(*, deprecated, renamed: "textReadInapplicableDocumentType")
  public static var textReadInapplicableDocumentTypeError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "textWriteInapplicableDocumentType")
  public static var textWriteInapplicableDocumentTypeError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceApplicationNotFound")
  public static var serviceApplicationNotFoundError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceApplicationLaunchFailed")
  public static var serviceApplicationLaunchFailedError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceRequestTimedOut")
  public static var serviceRequestTimedOutError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceInvalidPasteboardData")
  public static var serviceInvalidPasteboardDataError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceMalformedServiceDictionary")
  public static var serviceMalformedServiceDictionaryError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceMiscellaneousError")
  public static var serviceMiscellaneous: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "sharingServiceNotConfigured")
  public static var sharingServiceNotConfiguredError: Foundation.CocoaError.Code {
    get
  }
}
extension CocoaError {
  public static var textReadInapplicableDocumentType: Foundation.CocoaError.Code {
    get
  }
  public static var textWriteInapplicableDocumentType: Foundation.CocoaError.Code {
    get
  }
  public static var serviceApplicationNotFound: Foundation.CocoaError.Code {
    get
  }
  public static var serviceApplicationLaunchFailed: Foundation.CocoaError.Code {
    get
  }
  public static var serviceRequestTimedOut: Foundation.CocoaError.Code {
    get
  }
  public static var serviceInvalidPasteboardData: Foundation.CocoaError.Code {
    get
  }
  public static var serviceMalformedServiceDictionary: Foundation.CocoaError.Code {
    get
  }
  public static var serviceMiscellaneous: Foundation.CocoaError.Code {
    get
  }
  public static var sharingServiceNotConfigured: Foundation.CocoaError.Code {
    get
  }
  @available(OSX 10.13, *)
  public static var fontAssetDownloadError: Foundation.CocoaError.Code {
    get
  }
}
extension CocoaError {
  @available(*, deprecated, renamed: "textReadInapplicableDocumentType")
  public static var textReadInapplicableDocumentTypeError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "textWriteInapplicableDocumentType")
  public static var textWriteInapplicableDocumentTypeError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceApplicationNotFound")
  public static var serviceApplicationNotFoundError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceApplicationLaunchFailed")
  public static var serviceApplicationLaunchFailedError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceRequestTimedOut")
  public static var serviceRequestTimedOutError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceInvalidPasteboardData")
  public static var serviceInvalidPasteboardDataError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceMalformedServiceDictionary")
  public static var serviceMalformedServiceDictionaryError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceMiscellaneous")
  public static var serviceMiscellaneousError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "sharingServiceNotConfigured")
  public static var sharingServiceNotConfiguredError: Foundation.CocoaError.Code {
    get
  }
}
extension CocoaError {
  public var isServiceError: Swift.Bool {
    get
  }
  public var isSharingServiceError: Swift.Bool {
    get
  }
  public var isTextReadWriteError: Swift.Bool {
    get
  }
  @available(OSX 10.13, *)
  public var isFontError: Swift.Bool {
    get
  }
}
extension CocoaError {
  @available(*, deprecated, renamed: "textReadInapplicableDocumentType")
  public static var TextReadInapplicableDocumentTypeError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "textWriteInapplicableDocumentType")
  public static var TextWriteInapplicableDocumentTypeError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceApplicationNotFound")
  public static var ServiceApplicationNotFoundError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceApplicationLaunchFailed")
  public static var ServiceApplicationLaunchFailedError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceRequestTimedOut")
  public static var ServiceRequestTimedOutError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceInvalidPasteboardData")
  public static var ServiceInvalidPasteboardDataError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceMalformedServiceDictionary")
  public static var ServiceMalformedServiceDictionaryError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceMiscellaneous")
  public static var ServiceMiscellaneousError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "sharingServiceNotConfigured")
  public static var SharingServiceNotConfiguredError: Foundation.CocoaError.Code {
    get
  }
}
extension CocoaError.Code {
  @available(*, deprecated, renamed: "textReadInapplicableDocumentType")
  public static var TextReadInapplicableDocumentTypeError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "textWriteInapplicableDocumentType")
  public static var TextWriteInapplicableDocumentTypeError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceApplicationNotFound")
  public static var ServiceApplicationNotFoundError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceApplicationLaunchFailed")
  public static var ServiceApplicationLaunchFailedError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceRequestTimedOut")
  public static var ServiceRequestTimedOutError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceInvalidPasteboardData")
  public static var ServiceInvalidPasteboardDataError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceMalformedServiceDictionary")
  public static var ServiceMalformedServiceDictionaryError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceMiscellaneous")
  public static var ServiceMiscellaneousError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "sharingServiceNotConfigured")
  public static var SharingServiceNotConfiguredError: Foundation.CocoaError.Code {
    get
  }
}
extension NSEvent {
  public struct SpecialKey : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable {
    public init(rawValue: Swift.Int)
    public let rawValue: Swift.Int
    public var unicodeScalar: Swift.Unicode.Scalar {
      get
    }
    public typealias RawValue = Swift.Int
  }
  open var specialKey: AppKit.NSEvent.SpecialKey? {
    get
  }
}
extension NSEvent.SpecialKey {
  public static let upArrow: AppKit.NSEvent.SpecialKey
  public static let downArrow: AppKit.NSEvent.SpecialKey
  public static let leftArrow: AppKit.NSEvent.SpecialKey
  public static let rightArrow: AppKit.NSEvent.SpecialKey
  public static let f1: AppKit.NSEvent.SpecialKey
  public static let f2: AppKit.NSEvent.SpecialKey
  public static let f3: AppKit.NSEvent.SpecialKey
  public static let f4: AppKit.NSEvent.SpecialKey
  public static let f5: AppKit.NSEvent.SpecialKey
  public static let f6: AppKit.NSEvent.SpecialKey
  public static let f7: AppKit.NSEvent.SpecialKey
  public static let f8: AppKit.NSEvent.SpecialKey
  public static let f9: AppKit.NSEvent.SpecialKey
  public static let f10: AppKit.NSEvent.SpecialKey
  public static let f11: AppKit.NSEvent.SpecialKey
  public static let f12: AppKit.NSEvent.SpecialKey
  public static let f13: AppKit.NSEvent.SpecialKey
  public static let f14: AppKit.NSEvent.SpecialKey
  public static let f15: AppKit.NSEvent.SpecialKey
  public static let f16: AppKit.NSEvent.SpecialKey
  public static let f17: AppKit.NSEvent.SpecialKey
  public static let f18: AppKit.NSEvent.SpecialKey
  public static let f19: AppKit.NSEvent.SpecialKey
  public static let f20: AppKit.NSEvent.SpecialKey
  public static let f21: AppKit.NSEvent.SpecialKey
  public static let f22: AppKit.NSEvent.SpecialKey
  public static let f23: AppKit.NSEvent.SpecialKey
  public static let f24: AppKit.NSEvent.SpecialKey
  public static let f25: AppKit.NSEvent.SpecialKey
  public static let f26: AppKit.NSEvent.SpecialKey
  public static let f27: AppKit.NSEvent.SpecialKey
  public static let f28: AppKit.NSEvent.SpecialKey
  public static let f29: AppKit.NSEvent.SpecialKey
  public static let f30: AppKit.NSEvent.SpecialKey
  public static let f31: AppKit.NSEvent.SpecialKey
  public static let f32: AppKit.NSEvent.SpecialKey
  public static let f33: AppKit.NSEvent.SpecialKey
  public static let f34: AppKit.NSEvent.SpecialKey
  public static let f35: AppKit.NSEvent.SpecialKey
  public static let insert: AppKit.NSEvent.SpecialKey
  public static let deleteForward: AppKit.NSEvent.SpecialKey
  public static let home: AppKit.NSEvent.SpecialKey
  public static let begin: AppKit.NSEvent.SpecialKey
  public static let end: AppKit.NSEvent.SpecialKey
  public static let pageUp: AppKit.NSEvent.SpecialKey
  public static let pageDown: AppKit.NSEvent.SpecialKey
  public static let printScreen: AppKit.NSEvent.SpecialKey
  public static let scrollLock: AppKit.NSEvent.SpecialKey
  public static let pause: AppKit.NSEvent.SpecialKey
  public static let sysReq: AppKit.NSEvent.SpecialKey
  public static let `break`: AppKit.NSEvent.SpecialKey
  public static let reset: AppKit.NSEvent.SpecialKey
  public static let stop: AppKit.NSEvent.SpecialKey
  public static let menu: AppKit.NSEvent.SpecialKey
  public static let user: AppKit.NSEvent.SpecialKey
  public static let system: AppKit.NSEvent.SpecialKey
  public static let print: AppKit.NSEvent.SpecialKey
  public static let clearLine: AppKit.NSEvent.SpecialKey
  public static let clearDisplay: AppKit.NSEvent.SpecialKey
  public static let insertLine: AppKit.NSEvent.SpecialKey
  public static let deleteLine: AppKit.NSEvent.SpecialKey
  public static let insertCharacter: AppKit.NSEvent.SpecialKey
  public static let deleteCharacter: AppKit.NSEvent.SpecialKey
  public static let prev: AppKit.NSEvent.SpecialKey
  public static let next: AppKit.NSEvent.SpecialKey
  public static let select: AppKit.NSEvent.SpecialKey
  public static let execute: AppKit.NSEvent.SpecialKey
  public static let undo: AppKit.NSEvent.SpecialKey
  public static let redo: AppKit.NSEvent.SpecialKey
  public static let find: AppKit.NSEvent.SpecialKey
  public static let help: AppKit.NSEvent.SpecialKey
  public static let modeSwitch: AppKit.NSEvent.SpecialKey
  public static let enter: AppKit.NSEvent.SpecialKey
  public static let backspace: AppKit.NSEvent.SpecialKey
  public static let tab: AppKit.NSEvent.SpecialKey
  public static let newline: AppKit.NSEvent.SpecialKey
  public static let formFeed: AppKit.NSEvent.SpecialKey
  public static let carriageReturn: AppKit.NSEvent.SpecialKey
  public static let backTab: AppKit.NSEvent.SpecialKey
  public static let delete: AppKit.NSEvent.SpecialKey
  public static let lineSeparator: AppKit.NSEvent.SpecialKey
  public static let paragraphSeparator: AppKit.NSEvent.SpecialKey
}
extension CGRect {
  @available(swift 4)
  public func fill(using operation: AppKit.NSCompositingOperation = NSGraphicsContext.current?.compositingOperation ?? .sourceOver)
  @available(swift 4)
  public func frame(withWidth width: CoreGraphics.CGFloat = 1.0, using operation: AppKit.NSCompositingOperation = NSGraphicsContext.current?.compositingOperation ?? .sourceOver)
  @available(swift 4)
  public func clip()
}
extension Sequence where Self.Element == Foundation.NSRect {
  @available(swift 4)
  public func fill(using operation: AppKit.NSCompositingOperation = NSGraphicsContext.current?.compositingOperation ?? .sourceOver)
  @available(swift 4)
  public func clip()
}
extension Sequence where Self.Element == (CoreGraphics.CGRect, AppKit.NSColor) {
  @available(swift 4)
  public func fill(using operation: AppKit.NSCompositingOperation = NSGraphicsContext.current?.compositingOperation ?? .sourceOver)
}
extension Sequence where Self.Element == (CoreGraphics.CGRect, gray: CoreGraphics.CGFloat) {
  @available(swift 4)
  public func fill(using operation: AppKit.NSCompositingOperation = NSGraphicsContext.current?.compositingOperation ?? .sourceOver)
}
extension NSWindow.Depth {
  @available(swift 4)
  public static func bestDepth(colorSpaceName: AppKit.NSColorSpaceName, bitsPerSample: Swift.Int, bitsPerPixel: Swift.Int, isPlanar: Swift.Bool) -> (AppKit.NSWindow.Depth, isExactMatch: Swift.Bool)
  @available(swift 4)
  public static var availableDepths: [AppKit.NSWindow.Depth] {
    get
  }
}
extension NSAnimationEffect {
  @available(swift 4)
  public func show(centeredAt centerLocation: Foundation.NSPoint, size: Foundation.NSSize, completionHandler: @escaping () -> Swift.Void = { })
}
extension NSSound {
  @available(swift 4)
  public static func beep()
}
extension NSOpenGLGlobalOption {
  @available(swift 4)
  public var globalValue: OpenGL.GLint {
    get
    set
  }
}
extension NSOpenGLContext {
  @available(swift 4)
  public static var openGLVersion: (major: OpenGL.GLint, minor: OpenGL.GLint) {
    get
  }
}
@available(OSX 10.10, *)
extension NSStoryboard {
  @available(OSX 10.15, *)
  public func instantiateInitialController<Controller>(creator: ((Foundation.NSCoder) -> Controller?)? = nil) -> Controller? where Controller : AppKit.NSViewController
  @available(OSX 10.15, *)
  public func instantiateInitialController<Controller>(creator: ((Foundation.NSCoder) -> Controller?)? = nil) -> Controller? where Controller : AppKit.NSWindowController
  @available(OSX 10.15, *)
  public func instantiateController<Controller>(identifier: AppKit.NSStoryboard.SceneIdentifier, creator: ((Foundation.NSCoder) -> Controller?)? = nil) -> Controller where Controller : AppKit.NSViewController
  @available(OSX 10.15, *)
  public func instantiateController<Controller>(identifier: AppKit.NSStoryboard.SceneIdentifier, creator: ((Foundation.NSCoder) -> Controller?)? = nil) -> Controller where Controller : AppKit.NSWindowController
}
