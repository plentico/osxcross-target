// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2 (swiftlang-1103.8.25.8 clang-1103.0.30.20)
// swift-module-flags: -target x86_64-apple-macosx10.15 -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftSceneKit -swift-version 5 -O -enforce-exclusivity=unchecked -module-name SceneKit
import CoreGraphics
import Foundation
@_exported import SceneKit
import Swift
import simd
public typealias SCNFloat = CoreGraphics.CGFloat
extension SCNVector3 {
  public init(_ x: Swift.Float, _ y: Swift.Float, _ z: Swift.Float)
  public init(_ x: CoreGraphics.CGFloat, _ y: CoreGraphics.CGFloat, _ z: CoreGraphics.CGFloat)
  public init(_ x: Swift.Double, _ y: Swift.Double, _ z: Swift.Double)
  public init(_ x: Swift.Int, _ y: Swift.Int, _ z: Swift.Int)
  public init(_ v: Swift.SIMD3<Swift.Float>)
  public init(_ v: Swift.SIMD3<Swift.Double>)
}
extension SIMD3 where Scalar == Swift.Float {
  public init(_ v: SceneKit.SCNVector3)
}
extension SIMD3 where Scalar == Swift.Double {
  public init(_ v: SceneKit.SCNVector3)
}
extension SCNVector4 {
  public init(_ x: Swift.Float, _ y: Swift.Float, _ z: Swift.Float, _ w: Swift.Float)
  public init(_ x: CoreGraphics.CGFloat, _ y: CoreGraphics.CGFloat, _ z: CoreGraphics.CGFloat, _ w: CoreGraphics.CGFloat)
  public init(_ x: Swift.Double, _ y: Swift.Double, _ z: Swift.Double, _ w: Swift.Double)
  public init(_ x: Swift.Int, _ y: Swift.Int, _ z: Swift.Int, _ w: Swift.Int)
  public init(_ v: Swift.SIMD4<Swift.Float>)
  public init(_ v: Swift.SIMD4<Swift.Double>)
}
extension SIMD4 where Scalar == Swift.Float {
  public init(_ v: SceneKit.SCNVector4)
}
extension SIMD4 where Scalar == Swift.Double {
  public init(_ v: SceneKit.SCNVector4)
}
extension CATransform3D {
  public init(_ m: simd.float4x4)
  public init(_ m: simd.double4x4)
}
extension simd_float4x4 {
  public init(_ m: SceneKit.SCNMatrix4)
}
extension simd_double4x4 {
  public init(_ m: SceneKit.SCNMatrix4)
}
@available(iOS 8.0, OSX 10.8, *)
extension SCNGeometryElement {
  convenience public init<IndexType>(indices: [IndexType], primitiveType: SceneKit.SCNGeometryPrimitiveType) where IndexType : Swift.FixedWidthInteger
}
@available(iOS 8.0, OSX 10.8, *)
extension SCNGeometrySource {
  @nonobjc convenience public init(vertices: [SceneKit.SCNVector3])
  @nonobjc convenience public init(normals: [SceneKit.SCNVector3])
  @nonobjc convenience public init(textureCoordinates: [CoreGraphics.CGPoint])
}
@available(iOS 8.0, OSX 10.10, *)
extension SCNBoundingVolume {
  public var boundingBox: (min: SceneKit.SCNVector3, max: SceneKit.SCNVector3) {
    get
    set
  }
  public var boundingSphere: (center: SceneKit.SCNVector3, radius: Swift.Float) {
    get
  }
}
@available(iOS 8.0, OSX 10.8, *)
extension SCNSceneSource {
  public func entryWithIdentifier<T>(_ uid: Swift.String, withClass entryClass: T.Type) -> T? where T : AnyObject
}
extension SCNVector3 : Swift._ObjectiveCBridgeable {
  public func _bridgeToObjectiveC() -> Foundation.NSValue
  public static func _forceBridgeFromObjectiveC(_ source: Foundation.NSValue, result: inout SceneKit.SCNVector3?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Foundation.NSValue, result: inout SceneKit.SCNVector3?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Foundation.NSValue?) -> SceneKit.SCNVector3
  public typealias _ObjectiveCType = Foundation.NSValue
}
extension SCNVector4 : Swift._ObjectiveCBridgeable {
  public func _bridgeToObjectiveC() -> Foundation.NSValue
  public static func _forceBridgeFromObjectiveC(_ source: Foundation.NSValue, result: inout SceneKit.SCNVector4?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Foundation.NSValue, result: inout SceneKit.SCNVector4?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Foundation.NSValue?) -> SceneKit.SCNVector4
  public typealias _ObjectiveCType = Foundation.NSValue
}
