// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2 (swiftlang-1103.8.25.8 clang-1103.0.30.20)
// swift-module-flags: -target x86_64-apple-macosx10.15 -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftCoreMIDI -swift-version 5 -O -enforce-exclusivity=unchecked -module-name CoreMIDI
@_exported import CoreMIDI
import Foundation
import Swift
@available(OSX 10.15, iOS 13.0, *)
public struct UnsafeMutableMIDIPacketPointer {
  public init(_ p: Swift.UnsafeMutablePointer<CoreMIDI.MIDIPacket>)
  public init?(_ p: Swift.UnsafeMutablePointer<CoreMIDI.MIDIPacket>?)
  public var count: Swift.Int {
    get
    nonmutating set(newValue)
  }
  public var timeStamp: Swift.Int {
    get
    nonmutating set(newValue)
  }
}
@available(OSX 10.15, iOS 13.0, *)
extension UnsafeMutableMIDIPacketPointer : Swift.MutableCollection, Swift.RandomAccessCollection {
  @available(OSX 10.15, iOS 13.0, *)
  public typealias Element = Swift.UInt8
  @available(OSX 10.15, iOS 13.0, *)
  public typealias Index = Swift.Int
  @available(OSX 10.15, iOS 13.0, *)
  public typealias Indices = Swift.Range<Swift.Int>
  @available(OSX 10.15, iOS 13.0, *)
  public var startIndex: Swift.Int {
    get
  }
  @available(OSX 10.15, iOS 13.0, *)
  public var endIndex: Swift.Int {
    get
  }
  @available(OSX 10.15, iOS 13.0, *)
  public subscript(index: CoreMIDI.UnsafeMutableMIDIPacketPointer.Index) -> CoreMIDI.UnsafeMutableMIDIPacketPointer.Element {
    get
    nonmutating set(newValue)
  }
  public typealias SubSequence = Swift.Slice<CoreMIDI.UnsafeMutableMIDIPacketPointer>
  public typealias Iterator = CoreMIDI.MIDIPacket.ByteSequence.Iterator
}
extension MIDIPacket {
  @available(OSX 10.15, iOS 13.0, *)
  public struct ByteSequence : Swift.Sequence {
    public func makeIterator() -> CoreMIDI.MIDIPacket.ByteSequence.Iterator
    public var count: Swift.Int {
      get
    }
    public struct Iterator : Swift.IteratorProtocol {
      public init(_ s: CoreMIDI.MIDIPacket.ByteSequence)
      public mutating func next() -> Swift.UInt8?
      public typealias Element = Swift.UInt8
    }
    public typealias Element = Swift.UInt8
  }
  @available(OSX 10.15, iOS 13.0, *)
  public struct ByteCollection : Swift.RandomAccessCollection {
    public typealias Element = Swift.UInt8
    public typealias Index = Swift.Int
    public typealias Indices = Swift.Range<Swift.Int>
    public init(_ p: Swift.UnsafePointer<CoreMIDI.MIDIPacket>)
    public init?(_ p: Swift.UnsafePointer<CoreMIDI.MIDIPacket>?)
    public var count: Swift.Int {
      get
    }
    public var startIndex: Swift.Int {
      get
    }
    public var endIndex: Swift.Int {
      get
    }
    public subscript(index: CoreMIDI.MIDIPacket.ByteCollection.Index) -> CoreMIDI.MIDIPacket.ByteCollection.Element {
      get
    }
    public typealias SubSequence = Swift.Slice<CoreMIDI.MIDIPacket.ByteCollection>
    public typealias Iterator = Swift.IndexingIterator<CoreMIDI.MIDIPacket.ByteCollection>
  }
}
@available(OSX 10.15, iOS 13.0, *)
extension UnsafeMutableMIDIPacketPointer : Swift.Sequence {
  @available(OSX 10.15, iOS 13.0, *)
  public func makeIterator() -> CoreMIDI.MIDIPacket.ByteSequence.Iterator
}
extension UnsafePointer where Pointee == CoreMIDI.MIDIPacket {
  @available(OSX 10.15, iOS 13.0, *)
  public func sequence() -> CoreMIDI.MIDIPacket.ByteSequence
  @available(OSX 10.15, iOS 13.0, *)
  public func bytes() -> CoreMIDI.MIDIPacket.ByteCollection
}
extension MIDIPacket {
  @available(OSX 10.15, iOS 13.0, *)
  public class Builder {
    public var capacity: Swift.Int {
      get
    }
    public init(maximumNumberMIDIBytes: Swift.Int)
    @objc deinit
    public var count: Swift.Int {
      get
    }
    public var timeStamp: Swift.Int {
      get
      set(newValue)
    }
    public func append(_ midiBytes: Swift.UInt8...)
    public func withUnsafePointer<Result>(_ body: (Swift.UnsafePointer<CoreMIDI.MIDIPacket>) -> Result) -> Result
    public func withUnsafeMutableMIDIPacketPointer<Result>(_ body: (inout CoreMIDI.UnsafeMutableMIDIPacketPointer) -> Result) -> Result
  }
}
extension UnsafePointer where Pointee == CoreMIDI.MIDIPacketList {
  @available(OSX 10.15, iOS 13.0, *)
  public func unsafeSequence() -> CoreMIDI.MIDIPacketList.UnsafeSequence
}
extension MIDIPacketList {
  @available(OSX 10.15, iOS 13.0, *)
  public static func sizeInBytes(pktList: Swift.UnsafePointer<CoreMIDI.MIDIPacketList>) -> Swift.Int
  @available(OSX 10.15, iOS 13.0, *)
  public struct UnsafeSequence : Swift.Sequence {
    public func makeIterator() -> CoreMIDI.MIDIPacketList.UnsafeSequence.Iterator
    public var count: Swift.Int {
      get
    }
    public struct Iterator : Swift.IteratorProtocol {
      public init(_ s: CoreMIDI.MIDIPacketList.UnsafeSequence)
      public mutating func next() -> Swift.UnsafePointer<CoreMIDI.MIDIPacket>?
      public typealias Element = Swift.UnsafePointer<CoreMIDI.MIDIPacket>
    }
    public typealias Element = Swift.UnsafePointer<CoreMIDI.MIDIPacket>
  }
}
@available(OSX 10.15, iOS 13.0, *)
public struct UnsafeMutableMIDIPacketListPointer : Swift.Sequence {
  public var listSizeInBytes: Swift.Int {
    get
  }
  public var lastPacket: Swift.UnsafeMutablePointer<CoreMIDI.MIDIPacket>? {
    get
  }
  public init(_ p: Swift.UnsafeMutablePointer<CoreMIDI.MIDIPacketList>, byteSize: Swift.Int)
  public init?(_ p: Swift.UnsafeMutablePointer<CoreMIDI.MIDIPacketList>?, byteSize: Swift.Int)
  public var count: Swift.Int {
    get
  }
  public mutating func clear()
  @discardableResult
  public mutating func append(timestamp: CoreMIDI.MIDITimeStamp, data: [Swift.UInt8]) -> Swift.UnsafePointer<CoreMIDI.MIDIPacket>?
  public func makeIterator() -> CoreMIDI.MIDIPacketList.UnsafeSequence.Iterator
  public typealias Element = Swift.UnsafePointer<CoreMIDI.MIDIPacket>
  public typealias Iterator = CoreMIDI.MIDIPacketList.UnsafeSequence.Iterator
}
extension MIDIPacketList {
  @available(OSX 10.15, iOS 13.0, *)
  public class Builder {
    public init(byteSize: Swift.Int)
    @objc deinit
    @discardableResult
    public func append(timestamp: CoreMIDI.MIDITimeStamp, data: [Swift.UInt8]) -> Swift.UnsafePointer<CoreMIDI.MIDIPacket>?
    public func clear()
    public var count: Swift.Int {
      get
    }
    public func withUnsafePointer<Result>(_ body: (Swift.UnsafePointer<CoreMIDI.MIDIPacketList>) -> Result) -> Result
    public func withUnsafeMutableMIDIPacketListPointer<Result>(_ body: (inout CoreMIDI.UnsafeMutableMIDIPacketListPointer) -> Result) -> Result
  }
}
