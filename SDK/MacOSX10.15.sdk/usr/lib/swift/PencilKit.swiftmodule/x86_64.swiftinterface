// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2 (swiftlang-1103.8.25.8 clang-1103.0.30.20)
// swift-module-flags: -target x86_64-apple-macosx10.15 -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftPencilKit -swift-version 5 -O -enforce-exclusivity=unchecked -module-name PencilKit
@_exported import PencilKit
import Swift
@available(iOS 13.0, OSX 10.15, *)
public struct PKDrawing {
  public init()
  public init(data: Foundation.Data) throws
  public func dataRepresentation() -> Foundation.Data
  public var bounds: CoreGraphics.CGRect {
    get
  }
  public func image(from rect: CoreGraphics.CGRect, scale: CoreGraphics.CGFloat) -> AppKit.NSImage
  public mutating func transform(using transform: CoreGraphics.CGAffineTransform)
  public func transformed(using transform: CoreGraphics.CGAffineTransform) -> PencilKit.PKDrawing
  public mutating func append(_ toAppend: PencilKit.PKDrawing)
  public func appending(_ toAppend: PencilKit.PKDrawing) -> PencilKit.PKDrawing
}
@available(iOS 13.0, OSX 10.15, *)
extension PKDrawing : Swift.Equatable {
  public static func == (a: PencilKit.PKDrawing, b: PencilKit.PKDrawing) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, *)
extension PKDrawing : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@available(iOS 13.0, OSX 10.15, *)
extension PKDrawing : Swift._ObjectiveCBridgeable {
  public typealias _ObjectiveCType = PencilKit.PKDrawingReference
  public func _bridgeToObjectiveC() -> PencilKit.PKDrawing._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: PencilKit.PKDrawing._ObjectiveCType, result: inout PencilKit.PKDrawing?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PencilKit.PKDrawing._ObjectiveCType, result: inout PencilKit.PKDrawing?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PencilKit.PKDrawing._ObjectiveCType?) -> PencilKit.PKDrawing
}
