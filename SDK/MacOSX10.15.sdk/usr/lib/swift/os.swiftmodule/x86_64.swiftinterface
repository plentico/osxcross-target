// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2 (swiftlang-1103.8.25.8 clang-1103.0.30.20)
// swift-module-flags: -target x86_64-apple-macosx10.15 -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftos -swift-version 5 -O -enforce-exclusivity=unchecked -module-name os
import Swift
import _SwiftOSOverlayShims
@_exported import os.log
@_exported import os
@_exported import os.signpost
@available(OSX 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
public func os_log(_ type: os.OSLogType, dso: Swift.UnsafeRawPointer = #dsohandle, log: os.OSLog = .default, _ message: Swift.StaticString, _ args: Swift.CVarArg...)
@available(OSX 10.12, iOS 10.0, watchOS 3.0, tvOS 10.0, *)
public func os_log(_ message: Swift.StaticString, dso: Swift.UnsafeRawPointer? = #dsohandle, log: os.OSLog = .default, type: os.OSLogType = .default, _ args: Swift.CVarArg...)
extension OSLogType {
  @available(OSX 10.12, iOS 10.0, watchOS 3.0, tvOS 10.0, *)
  public static let `default`: os.OSLogType
  @available(OSX 10.12, iOS 10.0, watchOS 3.0, tvOS 10.0, *)
  public static let info: os.OSLogType
  @available(OSX 10.12, iOS 10.0, watchOS 3.0, tvOS 10.0, *)
  public static let debug: os.OSLogType
  @available(OSX 10.12, iOS 10.0, watchOS 3.0, tvOS 10.0, *)
  public static let error: os.OSLogType
  @available(OSX 10.12, iOS 10.0, watchOS 3.0, tvOS 10.0, *)
  public static let fault: os.OSLogType
}
extension OSLog {
  @available(OSX 10.12, iOS 10.0, watchOS 3.0, tvOS 10.0, *)
  public static let disabled: os.OSLog
  @available(OSX 10.12, iOS 10.0, watchOS 3.0, tvOS 10.0, *)
  public static let `default`: os.OSLog
  @available(OSX 10.12, iOS 10.0, watchOS 3.0, tvOS 10.0, *)
  convenience public init(subsystem: Swift.String, category: Swift.String)
}
@available(*, unavailable, renamed: "OSLogType.default")
public var OS_LOG_TYPE_DEFAULT: os.OSLogType {
  get
}
@available(*, unavailable, renamed: "OSLogType.info")
public var OS_LOG_TYPE_INFO: os.OSLogType {
  get
}
@available(*, unavailable, renamed: "OSLogType.debug")
public var OS_LOG_TYPE_DEBUG: os.OSLogType {
  get
}
@available(*, unavailable, renamed: "OSLogType.error")
public var OS_LOG_TYPE_ERROR: os.OSLogType {
  get
}
@available(*, unavailable, renamed: "OSLogType.fault")
public var OS_LOG_TYPE_FAULT: os.OSLogType {
  get
}
@available(OSX 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
public func os_signpost(_ type: os.OSSignpostType, dso: Swift.UnsafeRawPointer = #dsohandle, log: os.OSLog, name: Swift.StaticString, signpostID: os.OSSignpostID = .exclusive)
@available(OSX 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
public func os_signpost(_ type: os.OSSignpostType, dso: Swift.UnsafeRawPointer = #dsohandle, log: os.OSLog, name: Swift.StaticString, signpostID: os.OSSignpostID = .exclusive, _ format: Swift.StaticString, _ arguments: Swift.CVarArg...)
@available(OSX 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
extension OSSignpostType {
  public static let event: os.OSSignpostType
  public static let begin: os.OSSignpostType
  public static let end: os.OSSignpostType
}
@available(OSX 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
public struct OSSignpostID {
  public let rawValue: os.os_signpost_id_t
  public static let exclusive: os.OSSignpostID
  public static let invalid: os.OSSignpostID
  public static let null: os.OSSignpostID
  public init(log: os.OSLog)
  public init(log: os.OSLog, object: Swift.AnyObject)
  public init(_ value: Swift.UInt64)
}
@available(OSX 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
extension OSSignpostID : Swift.Comparable {
  public static func < (a: os.OSSignpostID, b: os.OSSignpostID) -> Swift.Bool
  public static func == (a: os.OSSignpostID, b: os.OSSignpostID) -> Swift.Bool
}
@available(OSX 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
extension OSLog {
  public struct Category {
    public let rawValue: Swift.String
    public static let pointsOfInterest: os.OSLog.Category
  }
  convenience public init(subsystem: Swift.String, category: os.OSLog.Category)
  public var signpostsEnabled: Swift.Bool {
    get
  }
}
@available(OSX 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
extension OSLog.Category {
  public static let dynamicTracing: os.OSLog.Category
  public static let dynamicStackTracing: os.OSLog.Category
}
