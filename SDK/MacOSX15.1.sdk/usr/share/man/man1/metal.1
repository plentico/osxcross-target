.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "METAL" "1" "July 10, 2024" "32023" "Metal"
.SH NAME
metal \- the Metal compiler
.SH SYNOPSIS
.sp
\fBmetal\fP [\fIoptions\fP] \fIfilename ...\fP
.SH DESCRIPTION
.sp
\fBmetal\fP is a Metal compiler which encompasses preprocessing, parsing,
optimization, code generation, assembly, and linking.  Depending on which
high\-level mode setting is passed, Metal will stop before doing a full link.
While Metal is highly integrated, it is important to understand the stages of
compilation, to understand how to invoke it.  These stages are:
.INDENT 0.0
.TP
.B Driver
The metal executable is actually a small driver which controls the overall
execution of other tools such as the compiler, assembler and linker.
Typically you do not need to interact with the driver, but you
transparently use it to run the other tools.
.TP
.B Preprocessing
This stage handles tokenization of the input source file, macro expansion,
#include expansion and handling of other preprocessor directives.  The
output of this stage is typically called a \(dq.metali\(dq (for Metal) file.
.TP
.B Parsing and Semantic Analysis
This stage parses the input file, translating preprocessor tokens into a
parse tree.  Once in the form of a parse tree, it applies semantic
analysis to compute types for expressions as well and determine whether
the code is well formed. This stage is responsible for generating most of
the compiler warnings as well as parse errors. The output of this stage is
an \(dqAbstract Syntax Tree\(dq (AST).
.TP
.B Code Generation and Optimization
This stage translates an AST into low\-level intermediate code (known as
\(dqLLVM IR\(dq) and ultimately to machine code.  This phase is responsible for
optimizing the generated code and handling target\-specific code generation.
The output of this stage is typically called a \(dq.s\(dq file or \(dqassembly\(dq file.
.sp
Metal also supports the use of an integrated assembler, in which the code
generator produces object files directly. This avoids the overhead of
generating the \(dq.s\(dq file and of calling the target assembler.
.TP
.B Assembler
This stage runs the target assembler to translate the output of the
compiler into a target object file. The output of this stage is typically
called a \(dq.o\(dq file or \(dqobject\(dq file.
.TP
.B Linker
This stage runs the target linker to merge multiple object files into an
executable or dynamic library. The output of this stage is typically called
an \(dqa.out\(dq, \(dq.dylib\(dq, \(dq.so\(dq, or \(dq.metallib\(dq file.
.UNINDENT
.SH TARGETS
.sp
By default \fBmetal\fP targets the \fIair64\fP virtual architecture.
Final translation to native code is performed at runtime.
.sp
\fBmetal\fP supports targeting native architectures using \fIair64\fP outputs
as intermediate steps. Translation from an \fIair64\fP output to the native output
is performed inside the \(dqCode Generation and Optimization\(dq, \(dqAssembler\(dq, or
\(dqLinker\(dq stages by a \fInative translator\fP tool.
.sp
A translation script can be fed to a native translator to convey extra
information useful for the compilation process, such as a render pipeline
description.
.SH OPTIONS
.SS Stage Selection Options
.INDENT 0.0
.TP
.B \-E
Run the preprocessor stage.
.UNINDENT
.INDENT 0.0
.TP
.B \-fsyntax\-only
Run the preprocessor, parser and type checking stages.
.UNINDENT
.INDENT 0.0
.TP
.B \-S
Run the previous stages as well as LLVM generation and optimization stages
and target\-specific code generation, producing an assembly file.
.UNINDENT
.INDENT 0.0
.TP
.B \-c
Run all of the above, plus the assembler, generating a target \(dq.o\(dq object file.
.UNINDENT
.INDENT 0.0
.TP
.B no stage selection option
If no stage selection option is specified, all stages above are run, and the
linker is run to combine the results into an executable or shared library.
.UNINDENT
.SS Language Selection and Mode Options
.INDENT 0.0
.TP
.B \-x <language>
Treat subsequent input files as having type language.
.UNINDENT
.INDENT 0.0
.TP
.B \-std=<standard>
Specify the language standard to compile for.
.sp
Supported values for the Metal language are:
.INDENT 7.0
.INDENT 3.5
.nf
\fBios\-metal1.0\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
iOS Metal 1.0
.UNINDENT
.UNINDENT
.nf
\fBios\-metal1.1\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
iOS Metal 1.1
.UNINDENT
.UNINDENT
.nf
\fBios\-metal1.2\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
iOS Metal 1.2
.UNINDENT
.UNINDENT
.nf
\fBios\-metal2.0\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
iOS Metal 2.0
.UNINDENT
.UNINDENT
.nf
\fBios\-metal2.1\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
iOS Metal 2.1
.UNINDENT
.UNINDENT
.nf
\fBios\-metal2.2\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
iOS Metal 2.2
.UNINDENT
.UNINDENT
.nf
\fBios\-metal2.3\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
iOS Metal 2.3
.UNINDENT
.UNINDENT
.nf
\fBios\-metal2.4\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
iOS Metal 2.4
.UNINDENT
.UNINDENT
.nf
\fBmacos\-metal1.1\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
macOS Metal 1.1
.UNINDENT
.UNINDENT
.nf
\fBmacos\-metal1.2\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
macOS Metal 1.2
.UNINDENT
.UNINDENT
.nf
\fBmacos\-metal2.0\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
macOS Metal 2.0
.UNINDENT
.UNINDENT
.nf
\fBmacos\-metal2.1\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
macOS Metal 2.1
.UNINDENT
.UNINDENT
.nf
\fBmacos\-metal2.2\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
macOS Metal 2.2
.UNINDENT
.UNINDENT
.nf
\fBmacos\-metal2.3\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
macOS Metal 2.3
.UNINDENT
.UNINDENT
.nf
\fBmacos\-metal2.4\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
macOS Metal 2.4
.UNINDENT
.UNINDENT
.nf
\fBmetal3.0\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
Metal 3.0
.UNINDENT
.UNINDENT
.nf
\fBmetal3.1\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
Metal 3.1
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
The default Metal language standard depends on the chosen deployment target for
Apple platform:
.INDENT 7.0
.INDENT 3.5
.nf
\fBiOS 8.0\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
iOS Metal 1.0
.UNINDENT
.UNINDENT
.nf
\fBiOS 9.0\fP
\fBtvOS 9.0\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
iOS Metal 1.1
.UNINDENT
.UNINDENT
.nf
\fBiOS 10.0\fP
\fBtvOS 10.0\fP
\fBwatchOS 3.0\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
iOS Metal 1.2
.UNINDENT
.UNINDENT
.nf
\fBiOS 11.0\fP
\fBtvOS 11.0\fP
\fBwatchOS 4.0\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
iOS Metal 2.0
.UNINDENT
.UNINDENT
.nf
\fBiOS 12.0\fP
\fBtvOS 12.0\fP
\fBwatchOS 5.0\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
iOS Metal 2.1
.UNINDENT
.UNINDENT
.nf
\fBiOS 13.0\fP
\fBtvOS 13.0\fP
\fBwatchOS 6.0\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
iOS Metal 2.2
.UNINDENT
.UNINDENT
.nf
\fBiOS 14.0\fP
\fBtvOS 14.0\fP
\fBwatchOS 7.0\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
iOS Metal 2.3
.UNINDENT
.UNINDENT
.nf
\fBiOS 15.0\fP
\fBtvOS 15.0\fP
\fBwatchOS 8.0\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
iOS Metal 2.4
.UNINDENT
.UNINDENT
.nf
\fBMac OS X 10.11\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
macOS Metal 1.1
.UNINDENT
.UNINDENT
.nf
\fBMac OS X 10.12\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
macOS Metal 1.2
.UNINDENT
.UNINDENT
.nf
\fBMac OS X 10.13\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
macOS Metal 2.0
.UNINDENT
.UNINDENT
.nf
\fBMac OS X 10.14\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
macOS Metal 2.1
.UNINDENT
.UNINDENT
.nf
\fBMac OS X 10.15\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
macOS Metal 2.2
.UNINDENT
.UNINDENT
.nf
\fBmacOS 11\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
macOS Metal 2.3
.UNINDENT
.UNINDENT
.nf
\fBmacOS 12\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
macOS Metal 2.4
.UNINDENT
.UNINDENT
.nf
\fBiOS 16.0\fP
\fBtvOS 16.0\fP
\fBwatchOS 9.0\fP
\fBmacOS 13\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
Metal 3.0
.UNINDENT
.UNINDENT
.nf
\fBiOS 17.0\fP
\fBtvOS 17.0\fP
\fBwatchOS 10.0\fP
\fBmacOS 14\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
Metal 3.1
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Target Selection Options
.sp
Metal fully supports cross compilation as an inherent part of its design.
Depending on how your version of Metal is configured, it may have support for a
number of cross compilers, or may only support a native target.
.INDENT 0.0
.TP
.B \-arch <architecture>
Specify the architecture to build for.
.UNINDENT
.INDENT 0.0
.TP
.B \-mmacosx\-version\-min=<version>
When building for Mac OS X, specify the minimum version supported by your
application.
.UNINDENT
.INDENT 0.0
.TP
.B \-miphoneos\-version\-min
When building for iPhone OS, specify the minimum version supported by your
application.
.UNINDENT
.INDENT 0.0
.TP
.B \-mtvos\-version\-min
When building for Tv OS, specify the minimum version supported by your
application.
.UNINDENT
.INDENT 0.0
.TP
.B \-mwatchos\-version\-min
When building for Watch OS, specify the minimum version supported by your
application.
.UNINDENT
.INDENT 0.0
.TP
.B \-march=<cpu>
Specify that Metal should generate code for a specific processor family
member and later. For example, if you specify \-march=versionX, the compiler is
allowed to generate instructions that are valid on versionX and later processors,
but which may not exist on earlier ones.
.UNINDENT
.SS Code Generation Options
.INDENT 0.0
.TP
.B \-O0, \-O1, \-O2, \-O3, \-Ofast, \-Os, \-Oz, \-Og, \-O, \-O4
Specify which optimization level to use:
.INDENT 7.0
.INDENT 3.5
\fI\%\-O0\fP Means \(dqno optimization\(dq: this level compiles the fastest and
generates the most debuggable code.
.sp
\fI\%\-O1\fP Somewhere between \fI\%\-O0\fP and \fI\%\-O2\fP\&.
.sp
\fI\%\-O2\fP Moderate level of optimization which enables most
optimizations.
.sp
\fI\%\-O3\fP Like \fI\%\-O2\fP, except that it enables optimizations that
take longer to perform or that may generate larger code (in an attempt to
make the program run faster).
.sp
\fI\%\-Ofast\fP Enables all the optimizations from \fI\%\-O3\fP along
with other aggressive optimizations that may violate strict compliance with
language standards.
.sp
\fI\%\-Os\fP Like \fI\%\-O2\fP with extra optimizations to reduce code
size.
.sp
\fI\%\-Oz\fP Like \fI\%\-Os\fP (and thus \fI\%\-O2\fP), but reduces code
size further.
.sp
\fI\%\-Og\fP Like \fI\%\-O1\fP\&. In future versions, this option might
disable different optimizations in order to improve debuggability.
.sp
\fI\%\-O\fP Equivalent to \fI\%\-O2\fP\&.
.sp
\fI\%\-O4\fP and higher
.INDENT 0.0
.INDENT 3.5
Currently equivalent to \fI\%\-O3\fP
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-frecord\-sources, \-frecord\-sources=flat
.TP
.B Instruct the compiler to store the source (symbol) information. When generating an
.TP
.B IR output file, either option will store the source information in the output file.
.TP
.B When generating a metal library file, \(ga\-frecord\-sources\(ga will store the source
.TP
.B information in the Metal library file (.metallib), and  \(ga\-frecord\-sources=flat\(ga
.TP
.B will store the source information in a symbol companion file (.metallibsym).
.UNINDENT
.INDENT 0.0
.TP
.B \-g, \-gline\-tables\-only, \-gmodules
Control debug information output.  Note that Metal debug information works
best at \fI\%\-O0\fP\&.  When more than one option starting with \fI\-g\fP is
specified, the last one wins:
.INDENT 7.0
.INDENT 3.5
\fI\%\-g\fP Generate debug information.
.sp
\fI\%\-gline\-tables\-only\fP Generate only line table debug information. This
allows for symbolicated backtraces with inlining information, but does not
include any information about variables, their locations or types.
.sp
\fI\%\-gmodules\fP Generate debug information that contains external
references to types defined in Metal modules or precompiled headers instead
of emitting redundant debug type information into every object file.  This
option transparently switches the Metal module format to object file
containers that hold the Metal module together with the debug information.
When compiling a program that uses Metal modules or precompiled headers,
this option produces complete debug information with faster compile
times and much smaller object files.
.sp
This option should not be used when building static libraries for
distribution to other machines because the debug info will contain
references to the module cache on the machine the object files in the
library were built on.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-fstandalone\-debug \-fno\-standalone\-debug
Metal supports a number of optimizations to reduce the size of debug
information in the binary. They work based on the assumption that the
debug type information can be spread out over multiple compilation units.
For instance, Metal will not emit type definitions for types that are not
needed by a module and could be replaced with a forward declaration.
Further, Metal will only emit type info for a dynamic C++ class in the
module that contains the vtable for the class.
.sp
The \fI\%\-fstandalone\-debug\fP option turns off these optimizations.
This is useful when working with 3rd\-party libraries that don\(aqt come with
debug information.  This is the default on Darwin.  Note that Metal will
never emit type information for types that are not referenced at all by the
program.
.UNINDENT
.INDENT 0.0
.TP
.B \-fvisibility
This flag sets the default visibility level.
.UNINDENT
.INDENT 0.0
.TP
.B \-fcommon, \-fno\-common
This flag specifies that variables without initializers get common linkage.
It can be disabled with \fI\%\-fno\-common\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-ftls\-model=<model>
Set the default thread\-local storage (TLS) model to use for thread\-local
variables. Valid values are: \(dqglobal\-dynamic\(dq, \(dqlocal\-dynamic\(dq,
\(dqinitial\-exec\(dq and \(dqlocal\-exec\(dq. The default is \(dqglobal\-dynamic\(dq. The default
model can be overridden with the tls_model attribute. The compiler will try
to choose a more efficient model if possible.
.UNINDENT
.SS Driver Options
.INDENT 0.0
.TP
.B \-###
Print (but do not run) the commands to run for this compilation.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-help
Display available options.
.UNINDENT
.INDENT 0.0
.TP
.B \-Qunused\-arguments
Do not emit any warnings for unused driver arguments.
.UNINDENT
.INDENT 0.0
.TP
.B \-Wa,<args>
Pass the comma separated arguments in args to the assembler.
.UNINDENT
.INDENT 0.0
.TP
.B \-Wl,<args>
Pass the comma separated arguments in args to the linker.
.UNINDENT
.INDENT 0.0
.TP
.B \-Wp,<args>
Pass the comma separated arguments in args to the preprocessor.
.UNINDENT
.INDENT 0.0
.TP
.B \-Xanalyzer <arg>
Pass arg to the static analyzer.
.UNINDENT
.INDENT 0.0
.TP
.B \-Xassembler <arg>
Pass arg to the assembler.
.UNINDENT
.INDENT 0.0
.TP
.B \-Xlinker <arg>
Pass arg to the linker.
.UNINDENT
.INDENT 0.0
.TP
.B \-Xpreprocessor <arg>
Pass arg to the preprocessor.
.UNINDENT
.INDENT 0.0
.TP
.B \-o <file>
Write output to file.
.UNINDENT
.INDENT 0.0
.TP
.B \-print\-file\-name=<file>
Print the full library path of file.
.UNINDENT
.INDENT 0.0
.TP
.B \-print\-libgcc\-file\-name
Print the library path for the currently used compiler runtime library
(\(dqlibgcc.a\(dq or \(dqlibclang_rt.builtins.*.a\(dq).
.UNINDENT
.INDENT 0.0
.TP
.B \-print\-prog\-name=<name>
Print the full program path of name.
.UNINDENT
.INDENT 0.0
.TP
.B \-print\-search\-dirs
Print the paths used for finding libraries and programs.
.UNINDENT
.INDENT 0.0
.TP
.B \-save\-temps
Save intermediate compilation results.
.UNINDENT
.INDENT 0.0
.TP
.B \-save\-stats, \-save\-stats=cwd, \-save\-stats=obj
Save internal code generation (LLVM) statistics to a file in the current
directory (\fI\%\-save\-stats\fP/\(dq\-save\-stats=cwd\(dq) or the directory
of the output file (\(dq\-save\-state=obj\(dq).
.UNINDENT
.INDENT 0.0
.TP
.B \-integrated\-as, \-no\-integrated\-as
Used to enable and disable, respectively, the use of the integrated
assembler. Whether the integrated assembler is on by default is target
dependent.
.UNINDENT
.INDENT 0.0
.TP
.B \-time
Time individual commands.
.UNINDENT
.INDENT 0.0
.TP
.B \-ftime\-report
Print timing summary of each stage of compilation.
.UNINDENT
.INDENT 0.0
.TP
.B \-v
Show commands to run and use verbose output.
.UNINDENT
.SS Preprocessor Options
.INDENT 0.0
.TP
.B \-D<macroname>=<value>
Adds an implicit #define into the predefines buffer which is read before the
source file is preprocessed.
.UNINDENT
.INDENT 0.0
.TP
.B \-U<macroname>
Adds an implicit #undef into the predefines buffer which is read before the
source file is preprocessed.
.UNINDENT
.INDENT 0.0
.TP
.B \-include <filename>
Adds an implicit #include into the predefines buffer which is read before the
source file is preprocessed.
.UNINDENT
.INDENT 0.0
.TP
.B \-I<directory>
Add the specified directory to the search path for include files.
.UNINDENT
.INDENT 0.0
.TP
.B \-F<directory>
Add the specified directory to the search path for framework include files.
.UNINDENT
.INDENT 0.0
.TP
.B \-nostdinc
Do not search the standard system directories or compiler builtin directories
for include files.
.UNINDENT
.INDENT 0.0
.TP
.B \-nostdlibinc
Do not search the standard system directories for include files, but do
search compiler builtin include directories.
.UNINDENT
.INDENT 0.0
.TP
.B \-nobuiltininc
Do not search metal\(aqs builtin directory for include files.
.UNINDENT
.SS Native Translator Options
.INDENT 0.0
.TP
.B \-N <file>
Set <file> as the native translator script.
.UNINDENT
.SH ENVIRONMENT
.INDENT 0.0
.TP
.B TMPDIR, TEMP, TMP
These environment variables are checked, in order, for the location to write
temporary files used during the compilation process.
.UNINDENT
.INDENT 0.0
.TP
.B CPATH
If this environment variable is present, it is treated as a delimited list of
paths to be added to the default system include path list. The delimiter is
the platform dependent delimiter, as used in the PATH environment variable.
.sp
Empty components in the environment variable are ignored.
.UNINDENT
.INDENT 0.0
.TP
.B C_INCLUDE_PATH, OBJC_INCLUDE_PATH, CPLUS_INCLUDE_PATH, OBJCPLUS_INCLUDE_PATH
These environment variables specify additional paths, as for \fI\%CPATH\fP,
which are only used when processing the appropriate language.
.UNINDENT
.INDENT 0.0
.TP
.B MACOSX_DEPLOYMENT_TARGET
If \fI\%\-mmacosx\-version\-min\fP is unspecified, the default deployment
target is read from this environment variable. This option only affects
Darwin targets.
.UNINDENT
.INDENT 0.0
.TP
.B IPHONEOS_DEPLOYMENT_TARGET
If \fI\%\-miphoneos\-version\-min\fP is unspecified, the default deployment
target is read from this environment variable. This option only affects
Darwin targets.
.UNINDENT
.INDENT 0.0
.TP
.B TVOS_DEPLOYMENT_TARGET
If \fI\%\-mtvos\-version\-min\fP is unspecified, the default deployment
target is read from this environment variable. This option only affects
Darwin targets.
.UNINDENT
.INDENT 0.0
.TP
.B WATCHOS_DEPLOYMENT_TARGET
If \fI\%\-mwatchos\-version\-min\fP is unspecified, the default deployment
target is read from this environment variable. This option only affects
Darwin targets.
.UNINDENT
.SH EXAMPLES
.sp
To compile a bunch of \(dq.metal\(dq files for the \fIair64\fP architecture:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ metal \-arch air64 \-c foo.metal bar.metal
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To link a bunch of \(dq.air\(dq files for the \fIair64\fP architecture:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ metal \-arch air64 foo.air bar.air
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To link a bunch of \(dq.air\(dq files and translate the linked output to native code:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ metal \-arch amdgpu_gfx600 \-N gfx600.mtlp\-json foo.air bar.air \-o default\-gfx600.metallib
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Where \fIgfx600.metal\-pipelines\fP is a native translator script.
.SH BUGS
.sp
To report bugs, please visit <\fI\%https://developer.apple.com/bug\-reporting/\fP>. Most
bug reports should include preprocessed source files (use the \fI\%\-E\fP
option) and the full output of the compiler, along with information to
reproduce.
.SH SEE ALSO
.sp
\fBmetal\-arch(1)\fP,
\fBmetal\-config(1)\fP,
\fBmetal\-libtool(1)\fP,
\fBmetal\-nt(1)\fP,
\fBmetal\-pipelines\-script(5)\fP,
\fBmetal\-tt(1)\fP
.SH INTERNET RESOURCES
.sp
Metal Shading Language Specification: <\fI\%https://developer.apple.com/metal/Metal\-Shading\-Language\-Specification.pdf\fP>
.SH COPYRIGHT
2014-2024, The Metal Team
.\" Generated by docutils manpage writer.
.
