// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.7.43 clang-1600.0.25.3)
// swift-module-flags: -target x86_64-apple-ios18.1-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-bare-slash-regex -user-module-version 2949.0.11 -module-name CoreMotion
@_exported import CoreMotion
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
extension CoreMotion.CMOdometerData {
  @available(iOS 15.4, watchOS 8.4, *)
  public var slope: Swift.Double? {
    get
  }
  @available(iOS 15.4, watchOS 8.4, *)
  public var maxAbsSlope: Swift.Double? {
    get
  }
}
@available(watchOS 10.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension CoreMotion.CMBatchedSensorManager {
  public struct AccelerometerUpdates : _Concurrency.AsyncSequence {
    public typealias Element = [CoreMotion.CMAccelerometerData]
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      public mutating func next() async throws -> (CoreMotion.CMBatchedSensorManager.AccelerometerUpdates.Element)?
      @available(watchOS 10.0, *)
      @available(iOS, unavailable)
      @available(tvOS, unavailable)
      @available(macOS, unavailable)
      public typealias Element = (CoreMotion.CMBatchedSensorManager.AccelerometerUpdates.Element)
      #if compiler(>=5.3) && $AssociatedTypeImplements
      @available(watchOS 11.0, visionOS 2.0, *)
      @available(iOS, unavailable, introduced: 18.0)
      @available(tvOS, unavailable, introduced: 18.0)
      @available(macOS, unavailable, introduced: 15.0)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
      #else
      @available(watchOS 11.0, visionOS 2.0, *)
      @available(iOS, unavailable, introduced: 18.0)
      @available(tvOS, unavailable, introduced: 18.0)
      @available(macOS, unavailable, introduced: 15.0)
      public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
      #endif
    }
    public func makeAsyncIterator() -> CoreMotion.CMBatchedSensorManager.AccelerometerUpdates.Iterator
    @available(watchOS 10.0, *)
    @available(iOS, unavailable)
    @available(tvOS, unavailable)
    @available(macOS, unavailable)
    public typealias AsyncIterator = CoreMotion.CMBatchedSensorManager.AccelerometerUpdates.Iterator
    #if compiler(>=5.3) && $AssociatedTypeImplements
    @available(watchOS 11.0, visionOS 2.0, *)
    @available(iOS, unavailable, introduced: 18.0)
    @available(tvOS, unavailable, introduced: 18.0)
    @available(macOS, unavailable, introduced: 15.0)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = any Swift.Error
    #else
    @available(watchOS 11.0, visionOS 2.0, *)
    @available(iOS, unavailable, introduced: 18.0)
    @available(tvOS, unavailable, introduced: 18.0)
    @available(macOS, unavailable, introduced: 15.0)
    public typealias __AsyncSequence_Failure = any Swift.Error
    #endif
  }
  public func accelerometerUpdates() -> CoreMotion.CMBatchedSensorManager.AccelerometerUpdates
  public struct DeviceMotionUpdates : _Concurrency.AsyncSequence {
    public typealias Element = [CoreMotion.CMDeviceMotion]
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      public mutating func next() async throws -> (CoreMotion.CMBatchedSensorManager.DeviceMotionUpdates.Element)?
      @available(watchOS 10.0, *)
      @available(iOS, unavailable)
      @available(tvOS, unavailable)
      @available(macOS, unavailable)
      public typealias Element = (CoreMotion.CMBatchedSensorManager.DeviceMotionUpdates.Element)
      #if compiler(>=5.3) && $AssociatedTypeImplements
      @available(watchOS 11.0, visionOS 2.0, *)
      @available(iOS, unavailable, introduced: 18.0)
      @available(tvOS, unavailable, introduced: 18.0)
      @available(macOS, unavailable, introduced: 15.0)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
      #else
      @available(watchOS 11.0, visionOS 2.0, *)
      @available(iOS, unavailable, introduced: 18.0)
      @available(tvOS, unavailable, introduced: 18.0)
      @available(macOS, unavailable, introduced: 15.0)
      public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
      #endif
    }
    public func makeAsyncIterator() -> CoreMotion.CMBatchedSensorManager.DeviceMotionUpdates.Iterator
    @available(watchOS 10.0, *)
    @available(iOS, unavailable)
    @available(tvOS, unavailable)
    @available(macOS, unavailable)
    public typealias AsyncIterator = CoreMotion.CMBatchedSensorManager.DeviceMotionUpdates.Iterator
    #if compiler(>=5.3) && $AssociatedTypeImplements
    @available(watchOS 11.0, visionOS 2.0, *)
    @available(iOS, unavailable, introduced: 18.0)
    @available(tvOS, unavailable, introduced: 18.0)
    @available(macOS, unavailable, introduced: 15.0)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = any Swift.Error
    #else
    @available(watchOS 11.0, visionOS 2.0, *)
    @available(iOS, unavailable, introduced: 18.0)
    @available(tvOS, unavailable, introduced: 18.0)
    @available(macOS, unavailable, introduced: 15.0)
    public typealias __AsyncSequence_Failure = any Swift.Error
    #endif
  }
  public func deviceMotionUpdates() -> CoreMotion.CMBatchedSensorManager.DeviceMotionUpdates
}
